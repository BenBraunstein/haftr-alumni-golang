---
AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Globals:
  Api:
    OpenApiVersion: 3.0.1

Parameters:
  Stage:
    Type: String
    Default: dev

  DBName:
    Type: String
    Default: haftr

  ServiceName:
    Type: String
    Default: haftr-alumni-golang

  ArtifactStore:
    Description: S3 Bucket, which will hold the artifacts and open api specs
    Type: String
    Default: codebuild-pipeline-artifacts

Resources:
  AlumniPhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ServiceName}-photos-${Stage}

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${Stage}
      EndpointConfiguration: Edge
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET, POST, PATCH, OPTIONS'"
        AllowHeaders: "'Content-Type, Authorization'"
      DefinitionBody:
        "Fn::Transform":
          Name: AWS::Include
          Parameters:
            Location: !Sub s3://${ArtifactStore}/open-api/${ServiceName}/open-api-integrated.yaml

  Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main
      Timeout: 180
      MemorySize: 512
      Runtime: go1.x
      FunctionName: !Sub ${ServiceName}-http-${Stage}
      Environment:
        Variables:
          MONGO_URI: "{{resolve:secretsmanager:haftr-alumni-golang:SecretString:MONGO_URI}}"
          DB_NAME: !Sub ${DBName}
          S3_BUCKET: !Ref AlumniPhotosBucket
          JWT_SECRET: "{{resolve:secretsmanager:haftr-alumni-golang:SecretString:JWT_SECRET}}"
      Policies:
        - VPCAccessPolicy: {}
        - S3CrudPolicy:
            BucketName: !Ref AlumniPhotosBucket
        - SESCrudPolicy: 
            IdentityName: Lifecycle@haftr.org
        - SESCrudPolicy: 
            IdentityName: haftralumni.org
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users
            Method: post
        UserOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users
            Method: options
        LoginUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /login
            Method: post
        LoginOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /login
            Method: options
        AutoLoginUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /autologin
            Method: get
        AutoLoginOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /autologin
            Method: options
        ApproveUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{userId}/approve
            Method: patch
        ApproveUserOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{userId}/approve
            Method: options
        DenyUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{userId}/deny
            Method: patch
        DenyUserOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{userId}/deny
            Method: options
        ForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /forgotpassword
            Method: post
        ForgotPasswordOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /forgotpassword
            Method: options
        SetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /setpassword
            Method: post
        SetPasswordOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /setpassword
            Method: options
        CreateAlumni:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /alumni
            Method: post
        EditAlumni:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /alumni/{alumniId}
            Method: patch
        AlumniOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /alumni/{alumniId}
            Method: options
        RetrieveAlumniByID:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /alumni/{alumniId}
            Method: get
        RetrieveAlumni:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /alumni
            Method: get
        ExportCSV:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /csv/alumni
            Method: get
        ExportCSVOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /csv/alumni
            Method: options
        HappyBirthday:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /happybirthday
            Method: get
        AlumniPublic:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /alumni/{alumniId}/gopublic
            Method: patch
        AlumniPublicOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /alumni/{alumniId}/gopublic
            Method: options
        AlumniPrivate:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /alumni/{alumniId}/goprivate
            Method: patch
        AlumniPrivateOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /alumni/{alumniId}/goprivate
            Method: options

  ScheduledFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main-scheduled
      Timeout: 180
      MemorySize: 512
      Runtime: go1.x
      FunctionName: !Sub ${ServiceName}-scheduled-${Stage}
      Environment:
        Variables:
          MONGO_URI: "{{resolve:secretsmanager:haftr-alumni-golang:SecretString:MONGO_URI}}"
          DB_NAME: !Sub ${DBName}
          S3_BUCKET: !Ref AlumniPhotosBucket
          JWT_SECRET: "{{resolve:secretsmanager:haftr-alumni-golang:SecretString:JWT_SECRET}}"
      Policies:
        - VPCAccessPolicy: {}
        - SESCrudPolicy: 
            IdentityName: Lifecycle@haftr.org
        - SESCrudPolicy: 
            IdentityName: haftralumni.org
      Events:
        BirthdayEmails:
          Type: Schedule
          Properties:
            Description: "Runs every day at 10AM EST"
            Schedule: "cron(0 15 * * ? *)"

Outputs:
  Endpoint:
    Description: Api endpoint for the HAFTR Alumni API Gateway
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
    Export:
      Name: !Sub ${ServiceName}-endpoint
  FunctionName:
    Description: Service Function Name
    Value: !Sub ${ServiceName}-${Stage}
    Export:
      Name: !Sub ${ServiceName}-name
  FunctionArn:
    Description: Service Function ARN
    Value: !GetAtt Function.Arn
    Export:
      Name: !Sub ${ServiceName}-arn
  AlumniPhotosS3Name:
    Value: !Ref AlumniPhotosBucket
    Export:
      Name: !Sub ${ServiceName}-photos-name